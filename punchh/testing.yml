resources:
  - name: eventframework_code_repo
    type: GitRepo
    configuration:
      gitProvider: github # name of the integration
      path: trriplejay/step_samples # temp so that pipeline sync will work
      branches:
        include: ^master$

  - name: docker_image_event_webhook_service
    type: Image
    configuration:
      registry: Creds_DockerRegistry_Punchh
      imageName: punchh/eventwebhook
      imageTag: latest

pipelines:
  - name: event_framework_ci
    configuration:
      environmentVariables:
        readOnly:
          COMPOSE: |
            'version: "3.8"
            services:

              redis:
                image: redis
                ports:
                  - "6379"
                restart: on-failure
              db:
                image: mysql:5.7
                volumes:
                  - db_data:/var/lib/mysql:delegated
                restart: always
                environment:
                  MYSQL_ROOT_PASSWORD: ${int_EnvVars_Development_EventFramework_MYSQL_ROOT_PASS}
                  MYSQL_DATABASE: punchh_development
                  MYSQL_USER: app_user
                  MYSQL_PASSWORD: ${int_EnvVars_Development_EventFramework_MYSQL_PASS}
                ports:
                  - "3306:3306"

            volumes:
              db_data:'
          DOCKER_ACC: punchh
          DOCKER_REPO: eventwebhook
    steps:
      - name: event_framework_master_build
        type: Bash
        configuration:
          integrations:
            - name: Creds_DockerRegistry_Punchh
            - name: docker_image_slack_notification
            - name: EnvVars_Development_EventFramework
          inputResources:
            - name: eventframework_code_repo
          outputResources:
            - name: docker_image_event_webhook_service
        execution:
          onStart:

            - echo $COMPOSE
            - echo -n $COMPOSE
            - echo $COMPOSE > docker-compose.yml
            - cat docker-compose.yml
            - docker-compose -d up
          onExecute:
            - echo "hello"
            - docker ps -a

          onSuccess:
            - |
                if ( [ $BRANCH == "master" ] && [ $IS_PULL_REQUEST == false ] )
                then
                  write_output docker_image_event_webhook_service "imageTag=$COMMIT buildNumber=$runNumber"
                fi

      - name: event_framework_staging_build
        type: Bash
        configuration:
          environmentVariables:
            PIPELINE_TRIGGER_DETAIL:
              description: "The branch you want to build"
              default: ""
              allowCustom: true
          integrations:
            - name: Creds_DockerRegistry_Punchh
            - name: docker_image_slack_notification
            - name: EnvVars_Development_EventFramework
          inputResources:
            - name: eventframework_code_repo
              trigger: false
            - name: docker_image_event_webhook_service
              trigger: false
        execution:
          onStart:
            - send_notification docker_image_slack_notification "started $step_name"
          onExecute:
            - export BRANCH_NAME="${int_EnvVars_Development_EventFramework_BRANCH_NAME}""
            - pushd ${res_eventframework_code_repo_resourcePath}
            - echo "step 2 branch name :- $BRANCH_NAME"
            - if [[ ${#PIPELINE_TRIGGER_DETAIL} -gt 0 ]]; then export BRANCH_NAME=$PIPELINE_TRIGGER_DETAIL; fi
            - git checkout $BRANCH_NAME
            - docker build -f app/build/Dockerfile -t $DOCKER_ACC/$DOCKER_REPO:$BRANCH_NAME . --pull
            - docker push $DOCKER_ACC/$DOCKER_REPO:$BRANCH_NAME
          onComplete:
            - send_notification docker_image_slack_notification "finished $step_name"


