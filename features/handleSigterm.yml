resources:
  - name: dummy
    type: PropertyBag
    configuration:
      dummy: dummy
pipelines:
  - name: john_bash_sigterm
    steps:
      - name: cancel_sigterm
        type: Bash
        configuration:
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
          onComplete:
            - echo "doing some cleanup in the onComplete section"
      - name: timeout_step_sigterm
        type: Bash
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: slow_failure_step_sigterm
        type: Bash
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: slow_complete_step_sigterm
        type: Bash
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onComplete:
            - echo "cleanup time in onComplete"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
          onFailure:
            - echo "doing some cleanup in the onFailure section"
  - name: john_host_bash_sigterm
    configuration:
      runtime:
        type: host
    steps:
      - name: host_cancel_sigterm
        type: Bash
        configuration:
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
          onComplete:
            - echo "doing some cleanup in the onComplete section"
      - name: host_timeout_step_sigterm
        type: Bash
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: host_failure_step_sigterm
        type: Bash
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: host_complete_step_sigterm
        type: Bash
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onComplete:
            - echo "cleanup time in onComplete"
            - |
                local i=0
                while [[ $i -lt 1000 ]]; do
                  echo "total wait time: $i seconds";
                  sleep 1
                  i=$(($i + 1))
                done
          onFailure:
            - echo "doing some cleanup in the onFailure section"

  - name: john_win_sigterm
    configuration:
      nodePool: win_2019
    steps:
      - name: cancel_sigterm
        type: PowerShell
        configuration:
          inputResources:
            - name: dummy
        execution:
          onExecute:
            - |
                $body = (@{statusCode = 4013} | ConvertTo-Json) # cancel itself
                $auth = @{ Authorization = "Bearer $builder_api_token" }
                $full_url = "${pipelines_api_url}/steps/${step_id}"
                Invoke-RestMethod -Method Put -Body $body  -ContentType 'application/json' -Headers $auth -Uri $full_url
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
          onFailure:
            - write-output onFailure
          onComplete:
            - write-output onComplete

      - name: timeout_step_sigterm
        type: PowerShell
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: slow_failure_step_sigterm
        type: PowerShell
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: slow_complete_step_sigterm
        type: PowerShell
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - |
                $i = 0
                while ($i -lt 1000) {
                  echo "total wait time: $i seconds";
                  start-sleep 1
                  $i += 1
                }
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onComplete:
            - echo "cleanup time in onComplete"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
          onFailure:
            - echo "doing some cleanup in the onFailure section"
  - name: john_win_host_sigterm
    configuration:
      runtime:
        type: host
      nodePool: win_2019
    steps:
      - name: host_cancel_sigterm
        type: PowerShell
        configuration:
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
          onComplete:
            - echo "doing some cleanup in the onComplete section"
      - name: host_timeout_step_sigterm
        type: PowerShell
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: host_failure_step_sigterm
        type: PowerShell
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onFailure:
            - echo "darn, we failed"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
          onComplete:
            - echo "doing some cleanup in the onComplete section"

      - name: host_complete_step_sigterm
        type: PowerShell
        configuration:
          timeoutSeconds: 5
          inputResources:
            - name: dummy
        execution:
          onStart:
            - echo "Setting everything up"
          onExecute:
            - echo "lets loop for a bit"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - echo "waiting complete. moving to success"
          onSuccess:
            - echo "we made it to success"
          onComplete:
            - echo "cleanup time in onComplete"
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10

          onFailure:
            - echo "doing some cleanup in the onFailure section"

      - name: slow_success_step_sigterm
        type: PowerShell
        configuration:
          inputResources:
            - name: dummy
        execution:
          onExecute:
            - write-output onExecute
          onSuccess:
            - badcommand
      - name: S_PS_8610_004_step
        type: PowerShell
        configuration:
          nodePool: win_2019
          inputResources:
            - name: dummy
        execution:
          onStart:
            - write-output onExecute
            - |
                $new_timeoutAt_date = get-date -format "yyyy-MM-dd HH:mm:ss"
                $body = (@{timeoutAt = $new_timeoutAt_date} | ConvertTo-Json)
                $auth = @{ Authorization = "Bearer $builder_api_token" }
                $full_url = "${pipelines_api_url}/steps/${step_id}"
                Invoke-RestMethod -Method Put -Body $body  -ContentType 'application/json' -Headers $auth -Uri $full_url
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
            - start-sleep 10
          onFailure:
            - write-output onFailure
          onComplete:
            - write-output onComplete

