resources:
  - name: applicationRepo
    type: GitRepo
    configuration:
      gitProvider: johns_github
      path: trriplejay/ios-hello-world
      branches:
        include: master

  - name: myImage_basic
    type: Image
    configuration:
      registry: johns_docker
      imageName: trriplejay/simpleserver
      imageTag: latest

  - name: myOtherImage_basic_2
    type: Image
    configuration:
      registry: johns_docker
      imageName: trriplejay/simpleserver
      imageTag: latest
      autoPull: false

  - name: myRepo_basic
    type: GitRepo
    configuration:
      path: trriplejay/simpleserver
      gitProvider: johns_github
      branches:
        include: ^dev.*$
        exclude: ^dev-9$
  - name: mac_cron
    type: CronTrigger
    configuration:
      interval: "0 */1 * * *"

pipelines:
  - name: macOS_check_utils
    steps:
      - name: mactest
        type: Bash
        configuration:
          inputResources:
            - name: mac_cron
          runtime:
            type: host
        execution:
          onStart:
            - echo "checking dependencies"
            - gcloud version || true
            - jfrog --version || true
            - node --version || true
            - bash --version || true
            - aws --version || true
            - xcode-select --version || true
            - xcodebuild || true
            - xcpretty --version || true
            - xcversion --version || true
            - ios --version || true
            - apn --version || true
            - pk --version || true
            - iap --version || true
            - ipa --version || true


          onExecute:
            - xcversion list
            - echo "testing some state stuff"
            - sleep 5
            - restore_cache_files state output.txt
            - restore_pipeline_files state output.txt
            - echo "pipeline source branch is - {{gitBranch}}"
            - echo "hello world $run_number" >> output.txt
            - odd=$(($run_number%2))
            - if [ "$odd" != 0 ]; then add_cache_files output.txt state; fi
            - add_pipeline_files output.txt state
            - add_run_variables "message=heeeeeeey_$run_number"
            - sleep 5
      - name: mac_followup
        type: Bash
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: mactest
        execution:
          onExecute:
            - echo "message is $message"



  - name: macOSpipe
    steps:
      - name: basic_step
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: test_group
          # inputResources:
          #   - name: appRepo
          #   - name: myRepo_basic
          #   - name: myImage_basic
          #     trigger: false
          outputResources:
            - name: myOtherImage_basic_2
        execution:
          onStart:
            - retry_command echo "here we go!!!"
            - echo "what is this"
          onExecute:
            - echo "read only value issssss $testReadOnly"
            - echo "$step_url"
            - docker ps -a
            - echo "Hello world!"
            - echo "step json at $STEP_JSON_PATH"
            - cat $STEP_JSON_PATH |  jq '.'
            - for item in ${!open_group_info[@]}; do echo "$item --- ${open_group_info[$item]}"; done
          onSuccess:
            - echo "yay success"
            - printenv | grep myRepo_basic
            - printenv | grep myImage_basic
            - printenv | sort
          onFailure:
            - echo "boo failure"
          onComplete:
            - echo "done"

      - name: fail_in_start
        type: Bash
        configuration:
          runtime:
            type: host
          integrations:
            - name: johns_github
          inputSteps:
            - name: basic_step
        execution:
          onStart:
            - echo "Prepping build environment"
            - echo "attempting to set readOnly variable"
            - export testReadOnly="foobar"
            - cat badfile
            - echo "we continue after failure"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"

      - name: fail_in_exec
        type: Bash
        configuration:
          runtime:
            type: host
          integrations:
            - name: johns_github
          inputSteps:
            - name: basic_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
            - cat badfile
            - echo "we continue after failure"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"

      - name: fail_in_onsucc
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: test_group
          integrations:
            - name: johns_github
          inputResources:
            - name: myOtherImage_basic_2
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
            - cat badfile
            - echo "we continue after failure"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"

      - name: fail_in_onfail
        type: Bash
        configuration:
          runtime:
            type: host
          integrations:
            - name: johns_github
          inputSteps:
            - name: basic_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
            - cat badfile
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
            - cat badfile
            - echo "we continue after failure"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"

      - name: fail_in_oncomp
        type: Bash
        configuration:
          runtime:
            type: host
          integrations:
            - name: johns_github
          inputSteps:
            - name: basic_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
            - cat badfile
            - echo "we continue after failure"
          onCancel:
            - echo "Someone cancelled the job"

  - name: macOSxcode
    steps:
      - name: install_xcode
        type: Bash
        configuration:
          timeoutSeconds: 10800
          runtime:
            type: host
          integrations:
            - name: xcode_creds
          environmentVariables:
            FASTLANE_SESSION: ${int_xcode_creds_fastlane_session}
            XCODE_INSTALL_USER: ${int_xcode_creds_username}
            XCODE_INSTALL_PASSWORD: ${int_xcode_creds_password}
        execution:
          onStart:
            - df -h
            - xcversion update
            - xcversion list
            - ls -latr
            - ls /Applications || true
          onExecute:
            - xcversion install 12 --retry-download-count=10
            - xcode-select --switch /Applications/Xcode-12.app
            - xcversion list
            - ls -latr
            - ls /Applications || true
            - echo "hello xcode"

  - name: iOSTestPipeline
    steps:
      - name: build_app
        type: Bash
        configuration:
          inputResources:
            - name: applicationRepo
          runtime:
            type: host
        execution:
          onExecute:
            - echo "hello iOS world"
            - xcversion list
            - ls -latr
            - ls /Applications || true
            - xcode-select --switch /Applications/Xcode-12.app
            - ls -latr "$res_iOSApplicationRepo_resourcePath"
            - xcodebuild -scheme HelloWorld clean build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO CODE_SIGN_ENTITLEMENTS="" -destination "platform=iOS Simulator,name=iPhone 12,OS=14.3"